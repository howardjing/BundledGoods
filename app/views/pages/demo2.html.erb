<h1>Tutorial</h1>

<script>


  $(function() {
    validator($("#problem1"));
    validator($("#problem2"));
    
    $("#next").click(function(event) {
      if (!isEverythingValid()) {
        event.preventDefault();
      }
    });
  });

  var validator = function(elem) {
  
    elem.children("button").click(function() {
        
      var success = 'control-group success';
      var error = 'control-group error';
      var everythingCorrect = true;

      elem.children(".question").each(function() {

        if (isValid($(this))) {
          if ($(this).attr('class').search(success) === -1) {
            $(this).removeClass(error);
            $(this).addClass(success);
          }
        } else {
          if ($(this).attr('class').search(error) === -1) {
            $(this).removeClass(success);
            $(this).addClass(error);
          }
          everythingCorrect = false;
        }
      });

      if (everythingCorrect) {
        elem.removeClass(error);
        elem.addClass(success);
        elem.children(".feedback").text("You've got it!");
      } else {
        elem.removeClass(success);
        elem.addClass(error);
        elem.children(".feedback").text("You are incorrect, please try again.");
      }

    });
  
  }

  var isValid = function(elem) {
    var input = elem.children(".response").val();
    var correct = elem.children(":hidden").val();
    if (input === correct) {
      return true;
    // if answer is numeric, then compare numbers
    } else {
      if (!isNaN(correct - 0)) {
        return (correct - 0 === input - 0);
      }
    }
    return false;
  }

  var isEverythingValid = function() {
    var problems = $("div").filter(function() { return this.id.match("problem"); });
    
    var areQuestionsForEveryProblemCorrect = problems.map(function() {
      
      var areQuestionsForProblemCorrect = $(this).children(".question").map(function() {
        return isValid($(this));  
      });

      var booleanArray = $.makeArray(areQuestionsForProblemCorrect);
      return booleanArray.reduce(function(x,y) { return x && y; });
       
    });

    var booleanArray = $.makeArray(areQuestionsForEveryProblemCorrect);
    return booleanArray.reduce(function(x,y) { return x && y; });

  }

</script>
<STYLE type="text/css">
  DIV.mypars {text-align: left}
 </STYLE>
<BODY>

<div class="container">
 <DIV class="mypars">
<P>
	You will know be guided in how to interpret statements. Here are the instructions for 
	how to evaluate utilites of more than one good together. You can check your answers by clicking the "Check" button next to the problem. 
	If the answer is correct, the text field will appear green and you will be greeted with a 
	message that reads "You've got it!". If it is incorrect, the text field will appear red 
	and a message will appear saying "You are incorrect, please try again."
<ol>
	<li>You will be faced with a decision to purchase a bundle of arbitrary goods
	x<sub>1</sub>, x<sub>2</sub> x<sub>3</sub> denoted as Good 1, Good 2, and Good 3.
	</li>
<br>
	<li>Each good has a utility value associated with each good based on <i>two times</i> the subscript
	of the good. (ie. Good 1 (x<sub>1</sub>) has utility value 2, Good 2 (x<sub>2</sub>) has
	utility value 4, Good <i>i</i> (x<sub>i</sub> has utility value 2 times i...) 
	Utility value is just an arbitrary preference scale over the set of 
	goods. The value will come into play for calculating your final payment.
	</li>
</ol>
<P>
	Given the instructions, answer the following questions. Pay attention to the italicized 
	instructions as they are important for interpreting the more complex statements that are 
	to follow.
<P>
<P> 
	Statements are independent of all previous viewed statements. For example, a statement 
	containing good 1 and good 2 <b>DOES NOT</b> affect a statement containing good 1, 
	good 2, and good 3. 
<P>	
	<b>You are purchasing goods one and two. <i>Sum up their individual utilities</i></b>
<P>

<div class="well" id="problem1">
  <span style="display:inline-block" class="question">
    <label>Good 1's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="2" />
  </span>

  <span style="display:inline-block" class="question">
    <label style="display:block">Operator</label>
		<select class="input-small response">
		  <option> </option>
  	  <option>+</option>
  	  <option>-</option>
  	  <option>/</option>
  	  <option>*</option>
    </select>
    <input type="hidden" value="+" />
  </span>

  <span style="display:inline-block" class="question">
    <label>Good 2's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="4" />
  </span>
  =
  <span style="display:inline-block" class="question">
    <label>Goods 1 and 2's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="6" />
  </span>
  <span class="help-block feedback"></span>
  <button class="btn btn-primary">Check</button>
</div>

<P>
	<b>Given that goods 15 and 35 exist, <i>sum up their individual utilities</i></b>
<P>

<div class="well" id="problem2">
  <span style="display:inline-block" class="question">
    <label>Good 15's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="30" />
  </span>

  <span style="display:inline-block" class="question">
    <label style="display:block">Operator</label>
		<select class="input-small response">
		  <option> </option>
  	  <option>+</option>
  	  <option>-</option>
  	  <option>/</option>
  	  <option>*</option>
    </select>
    <input type="hidden" value="+" />
  </span>

  <span style="display:inline-block" class="question">
    <label>Good 35's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="70" />
  </span>
  =
  <span style="display:inline-block" class="question">
    <label>Goods 15 and 35's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="100" />
  </span>
  <span class="help-block feedback"></span>
  <button class="btn btn-primary">Check</button>
</div>

</div>
<%= button_to 'Next', demo3_path, :class => 'btn btn-primary', :id => 'next', :method => 'get' %>
