<h1>Tutorial</h1>

<script>


  $(function() {
    validator($("#problem1"));
    
    $("#next").click(function(event) {
      if (!isEverythingValid()) {
        event.preventDefault();
      }
    });
  });

  var validator = function(elem) {
  
    elem.children("button").click(function() {
        
      var success = 'control-group success';
      var error = 'control-group error';
      var everythingCorrect = true;

      elem.children(".question").each(function() {

        if (isValid($(this))) {
          if ($(this).attr('class').search(success) === -1) {
            $(this).removeClass(error);
            $(this).addClass(success);
          }
        } else {
          if ($(this).attr('class').search(error) === -1) {
            $(this).removeClass(success);
            $(this).addClass(error);
          }
          everythingCorrect = false;
        }
      });

      if (everythingCorrect) {
        elem.removeClass(error);
        elem.addClass(success);
        elem.children(".feedback").text("You've got it!");
      } else {
        elem.removeClass(success);
        elem.addClass(error);
        elem.children(".feedback").text("You are incorrect, please try again.");
      }

    });
  
  }

  var isValid = function(elem) {
    var input = elem.children(".response").val();
    var correct = elem.children(":hidden").val();
    if (input === correct) {
      return true;
    // if answer is numeric, then compare numbers
    } else {
      if (!isNaN(correct - 0)) {
        return (correct - 0 === input - 0);
      }
    }
    return false;
  }

  var isEverythingValid = function() {
    var problems = $("div").filter(function() { return this.id.match("problem"); });
    
    var areQuestionsForEveryProblemCorrect = problems.map(function() {
      
      var areQuestionsForProblemCorrect = $(this).children(".question").map(function() {
        return isValid($(this));  
      });

      var booleanArray = $.makeArray(areQuestionsForProblemCorrect);
      return booleanArray.reduce(function(x,y) { return x && y; });
       
    });

    var booleanArray = $.makeArray(areQuestionsForEveryProblemCorrect);
    return booleanArray.reduce(function(x,y) { return x && y; });

  }

</script>

<STYLE type="text/css">
  DIV.mypars {text-align: left}
 </STYLE>
<BODY>

<div class="container">
 <DIV class="mypars">

<P>
	This tutorial will guide you in interpreting the full statements given in the experiment. 
	You can check your answers by clicking the "Check" button next to the problem. 
	If the answer is correct, the text field will appear green and you will be greeted with a 
	message that reads "You've got it!". If it is incorrect, the text field will appear red 
	and a message will appear saying "You are incorrect, please try again."
<P>
	Here will be the continued instructions for calculating statements.
<ul>
	<li> Purchasing goods together will have substitute and complement effects however. 
	It will be stated as follows for goods x<sub>i</sub>, x<sub>j</sub> ; i &ne; j with substitute complement
	effect &lambda;<sub>i,j</sub> (which will call the "lambda" value),
<br>
<br>
		<i>"Purchasing goods x<sub>i</sub> and x<sub>j</sub> in an exclusive bundle
		makes you value the bundle '&lambda;<sub>i,j</sub>' as much as if you summed the individual
		utilities."</i>
<br>
<br>
	<li>For a concrete example, the statement for bundle with goods one and two
	would be as follows:</li>
<br>
		<i>"Purchasing goods one and two in an exclusive bundle makes you value the bundle .75 
		times as much as if you summed the individual utilities."</i> <br>
</ul>
<P>
	Given these instructions, answer the following question. The important details are italicized.
<P>
	<b>"Purchasing goods one and two in an exclusive bundle makes you <i>value the bundle .75 
		times as much</i> as if you <i>summed the individual utilities</i>.</b>
<P>
	<I>Take note that answers can be decimal numbers or whole numbers. If the answer is not a whole number,
	write the answer in as a decimal number.</i>
<P>
</div>
	
<div class="well" id="problem1">
	<span style="display:inline-block" class="question">
    	<label>Substitute/Complement Effect</label>
    	<input type="text" class="san2 response" placeholder="Lambda Value">
    	<input type="hidden" value=".75" />
    </span> 
    
    <span style="display:inline-block" class="question">
    <label style="display:block">Operator</label>
		<select class="input-small response">
		  <option> </option>
  	  <option>+</option>
  	  <option>-</option>
  	  <option>/</option>
  	  <option>*</option>
    </select>
    <input type="hidden" value="*" />
  </span>
	(
	
	<span style="display:inline-block" class="question">
    <label>Good 1's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="2" />
  	</span>
  
    <span style="display:inline-block" class="question">
    <label style="display:block">Operator</label>
		<select class="input-small response">
		  <option> </option>
  	  <option>+</option>
  	  <option>-</option>
  	  <option>/</option>
  	  <option>*</option>
    </select>
    <input type="hidden" value="+" />
  	</span>
  
	<span style="display:inline-block" class="question">
    <label>Good 2's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="4" />
  </span>
  	)
  	=
	<span style="display:inline-block" class="question">
    <label>Goods 1 and 2's Utility</label>
    <input type="text" class="span2 response" placeholder="What is it's value?…" />
    <input type="hidden" value="4.5" />
 	 </span>
  <span class="help-block feedback"></span>
  <button class="btn btn-primary">Check</button>
</div>	
		
<P>
<%= button_to 'Next', instructions2_path, :class => 'btn btn-primary', :id => 'next', :method => 'get' %>